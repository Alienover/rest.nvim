==============================================================================
rest.nvim Lua API                                                *rest-nvim.api*


The Lua API for rest.nvim
Intended for use by third-party modules that extend its functionalities.


api.VERSION                                                        *api.VERSION*
    rest.nvim API version, equals to the current rest.nvim version. Meant to be used by modules later

    Type: ~
        (string)

    See: ~
        |vim.version|


api.namespace                                                    *api.namespace*
    rest.nvim namespace used for buffer highlights

    Type: ~
        (number)

    See: ~
        |vim.api.nvim_create_namespace|


                                                     *api.register_rest_autocmd*
api.register_rest_autocmd({events}, {cb}, {description})


    Parameters: ~
        {events}       (string[])                Autocommand events, see `:h events`
        {cb}           (string|fun(args:table))  Autocommand lua callback, runs a Vimscript command instead if it is a `string`
        {description}  (string)                  Autocommand description


                                                  *api.register_rest_subcommand*
api.register_rest_subcommand({name}, {cmd})
    Register a new `:Rest` subcommand

    Parameters: ~
        {name}  (string)   The name of the subcommand to register
        {cmd}   (RestCmd)


==============================================================================
rest.nvim utilities                                            *rest-nvim.utils*


 rest.nvim utility functions


utils.escape({str}, {only_necessary?})                            *utils.escape*
    Encodes a string into its escaped hexadecimal representation

    Parameters: ~
        {str}              (string)   Binary string to be encoded
        {only_necessary?}  (boolean)  Encode only necessary characters

    Returns: ~
        (string)


utils.url_decode({str})                                       *utils.url_decode*

    Parameters: ~
        {str}  (string)


utils.file_exists({path})                                    *utils.file_exists*
    Check if a file exists in the given `path`

    Parameters: ~
        {path}  (string)  file path

    Returns: ~
        (boolean)


utils.read_file({path})                                        *utils.read_file*
    Read a file if it exists

    Parameters: ~
        {path}  (string)  file path

    Returns: ~
        (string)


utils.parse_http_time()                                  *utils.parse_http_time*


                                                       *utils.ts_highlight_node*
utils.ts_highlight_node({bufnr}, {node}, {ns})

    Parameters: ~
        {bufnr}  (number)
        {node}   (TSNode)
        {ns}     (number)


utils.ts_parse_source({source})                          *utils.ts_parse_source*

    Parameters: ~
        {source}  (string|integer)

    Returns: ~
        (vim.treesitter.LanguageTree)
        (TSTree)


utils.ts_find({node}, {type})                                    *utils.ts_find*

    Parameters: ~
        {node}  (TSNode)
        {type}  (string)  @return TSNode?


                                                            *utils.ts_node_spec*
utils.ts_node_spec({node}, {expected_type})

    Parameters: ~
        {node}           (TSNode)
        {expected_type}  (string)

    Returns: ~
        (table)


utils.ts_node_error_log({node})                        *utils.ts_node_error_log*
    Create error log for TSNode that has a syntax error

    Parameters: ~
        {node}  (TSNode)  Tree-sitter node

    Returns: ~
        (string)


                                                        *utils.nvim_lazy_set_wo*
utils.nvim_lazy_set_wo({bufnr}, {name}, {value})
    Set window-option to specific buffer
    Some options leaves in `vim.wo` while they are actually tied to buffers
    see: <https://github.com/neovim/neovim/issues/11525> and `:h local-options`

    Parameters: ~
        {bufnr}  (number)
        {name}   (string)
        {value}  (any)


vim:tw=78:ts=8:noet:ft=help:norl:
