==============================================================================
rest.nvim parsing module dynamic variables       *rest-nvim.parser.dynamic_vars*


 rest.nvim dynamic variables


dynamic_vars.retrieve_all()                          *dynamic_vars.retrieve_all*
    Retrieve all dynamic variables from both rest.nvim and the ones declared by
    the user on his configuration
    @return { [string]: fun():string }[] An array-like table of tables which contains dynamic variables definition


dynamic_vars.read({name})                                    *dynamic_vars.read*
    Look for a dynamic variable and evaluate it

    Parameters: ~
        {name}  (string)  The dynamic variable name

    Returns: ~
        (string|nil)  dynamic variable value or `nil` if the dynamic variable was not found


==============================================================================
rest.nvim parsing module environment variables       *rest-nvim.parser.env_vars*


 rest.nvim environment variables


env_vars.set_var({name}, {value})                             *env_vars.set_var*
    Set an environment variable for the current Neovim session

    Parameters: ~
        {name}   (string)                 Variable name
        {value}  (string|number|boolean)  Variable value

    See: ~
        |vim.env|


env_vars.read_file({quiet})                                 *env_vars.read_file*
    Read the environment variables file from the rest.nvim configuration
    and store all the environment variables in the `vim.env` metatable

    Parameters: ~
        {quiet}  (boolean)  Whether to fail silently if an environment file is not found, defaults to `false`

    See: ~
        |vim.env|


==============================================================================
rest.nvim parsing module script variables         *rest-nvim.parser.script_vars*


 rest.nvim script variables


script_vars.load({script_str}, {res})                         *script_vars.load*
    Load a script_variable content and evaluate it

    Parameters: ~
        {script_str}  (string)  The script variable content
        {res}         (table)   Request response body


==============================================================================
rest.nvim tree-sitter parsing module                          *rest-nvim.parser*


Parsing module with tree-sitter, we use tree-sitter there to extract
all the document nodes and their content from the HTTP files, then we
start doing some other internal parsing like variables expansion and so on


NodesList                                                            *NodesList*

    Type: ~
        


Variables                                                            *Variables*

    Type: ~
        


parser.get_node_at_cursor()                          *parser.get_node_at_cursor*

    Returns: ~
        (string|nil)  type


                                                      *parser.look_behind_until*
parser.look_behind_until({node}, {query})
    Recursively look behind `node` until `query` node type is found

    Parameters: ~
        {node}   (TSNode|nil)  Tree-sitter node, defaults to the node at the cursor position if not passed
        {query}  (string)      The tree-sitter node type that we are looking for

    Returns: ~
        (TSNode|nil)


                                                          *parser.parse_request*
parser.parse_request({children_nodes}, {variables})
    Parse a request tree-sitter node

    Parameters: ~
        {children_nodes}  (NodesList)  Tree-sitter nodes
        {variables}       (Variables)  HTTP document variables list

    Returns: ~
        (table)  table containing the request target `url` and `method` to be used


                                                          *parser.parse_headers*
parser.parse_headers({header_nodes}, {variables})
    Parse request headers tree-sitter nodes

    Parameters: ~
        {header_nodes}  (NodesList)  Tree-sitter nodes
        {variables}     (Variables)  HTTP document variables list

    Returns: ~
        (table)  table containing the headers in a key-value style


                                                             *parser.parse_body*
parser.parse_body({children_nodes}, {variables})
    Parse a request tree-sitter node body

    Parameters: ~
        {children_nodes}  (NodesList)  Tree-sitter nodes
        {variables}       (Variables)  HTTP document variables list

    Returns: ~
        (table)  body table


parser.parse_script({req_node})                            *parser.parse_script*
    Get a script variable node and return its content

    Parameters: ~
        {req_node}  (TSNode)  Tree-sitter request node

    Returns: ~
        (string)  variables content


RequestReq                                                          *RequestReq*

    Fields: ~
        {method}         (string)  The request method
        {url}            (string)  The request URL
        {http_version?}  (string)  The request HTTP protocol


Request                                                                *Request*

    Fields: ~
        {request}  (RequestReq)
        {headers}  ()


parser.parse({req_node})                                          *parser.parse*
    Parse a request and return the request on itself, its headers and body

    Parameters: ~
        {req_node}  (TSNode)  Tree-sitter request node

    Returns: ~
        (Request)  containing the request data


vim:tw=78:ts=8:noet:ft=help:norl:
